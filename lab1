import math
from types import new_class


class Node:
    def __init__(self):
        self.size_of_node = 0
        self.data = []
        self.next = None

def calculate_optimal_node_size(size_of_node):
    return math.ceil(4 * size_of_node / 64) + 1

#print(calculate_optimal_node_size(int(input())))

class UnrolledLinkedList:
    def __init__(self, data = None, size_of_node = 1):
        if data is None:
            data = list()
        self.size_of_node = size_of_node
        self.nodes_count = math.ceil(len(data) / size_of_node)
        self.data_len = len(data)
        self.head = Node()
        self.head.data = data[:size_of_node]
        self.head.count_of_added = len(self.head.data)
        if self.nodes_count > 1:
            self.head.next = Node()
            temp_next = self.head.next
            for i in range(1, self.nodes_count):
                temp_next.data = data[i * size_of_node:(i + 1) * size_of_node]
                temp_next.count_of_added = len(temp_next.data)
                if i != self.nodes_count - 1:
                    temp_next.next = Node()
                    temp_next = temp_next.next

    def print_list(self):
        temp_next = self.head
        for i in range(self.nodes_count):
            print(f"Node {i}: {' '.join(map(str, temp_next.data))}")
            temp_next = temp_next.next

    def __len__(self):
        return self.data_len

    def find_by_index(self, index):
        if self.__len__() <= index < 0:
            return None
        elements_count = 0
        temp_next = self.head
        for i in range(self.nodes_count):
            if elements_count <= index <= (elements_count + temp_next.data -1):
                return temp_next.data[index - elements_count]
            elements_count += temp_next.data
            temp_next = temp_next.next

    def delete_by_index(self, index):
        if self.__len__() <= index < 0:
            return None
        elements_count = 0
        temp_next = self.head
        for i in range(self.nodes_count):
            if elements_count <= index <= (elements_count + temp_next.data -1):
                del temp_next.data[index - elements_count]
                temp_next.data -= 1
                self.data_len -= 1
                if self.__len__() == 0:
                    self.head = None
                    self.nodes_count = 0
                return True
            elements_count += temp_next.data
            temp_next = temp_next.next

    def append(self, element):
        if self.nodes_count == 0:
            self.head.data.append(element)
            self.head.size_of_node += 1
            self.data_len += 1
            self.nodes_count += 1
            return
        temp_next = self.head
        for i in range(self.nodes_count):
            if temp_next.size_of_node < self.size_of_node:
                temp_next.data.append(element)
                temp_next.size_of_node += 1
                self.data_len += 1
                return
            if i != self.nodes_count -1:
                temp_next = temp_next.next
        new_node = Node()
        temp_next.next = new_node
        current_node_data = temp_next.data
        left_data = current_node_data[:math.ceil(self.size_of_node / 2)]
        right_data = current_node_data[math.ceil(self.size_of_node / 2):]
        right_data.append(element)
        temp_next.data = left_data
        new_node.data = right_data
        temp_next.size_of_node = len(temp_next.data)
        new_node.size_of_node = len(new_node.data)
        self.nodes_count += 1


n = list(map(int,input().split()))
test = UnrolledLinkedList(n, calculate_optimal_node_size(len(n)))
test.print_list()
